{
  "name": "sphere-node-sync",
  "description": "Collection of Sync components for SPHERE.IO entities.",
  "version": "0.5.5",
  "keywords": [
    "sphere",
    "api",
    "sync"
  ],
  "homepage": "https://github.com/sphereio/sphere-node-sync",
  "author": {
    "name": "Nicola Molinari",
    "email": "nicola.molinari@commercetools.de"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sphereio/sphere-node-sync.git"
  },
  "bugs": {
    "url": "https://github.com/sphereio/sphere-node-sync/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/sphereio/sphere-node-sync/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./lib/main",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "build": "grunt build",
    "postpublish": "rm -rf lib",
    "test": "grunt coverage"
  },
  "dependencies": {
    "jsondiffpatch": "0.0.11",
    "q": "1.0.1",
    "sphere-node-client": "0.7.2",
    "sphere-node-utils": "0.4.11",
    "underscore": "1.6.0"
  },
  "devDependencies": {
    "coveralls": "2.10.0",
    "grunt": "0.4.4",
    "grunt-bump": "0.0.13",
    "grunt-coffeelint": "0.0.8",
    "grunt-contrib-clean": "0.5.0",
    "grunt-contrib-coffee": "0.10.1",
    "grunt-contrib-concat": "0.4.0",
    "grunt-contrib-watch": "0.6.1",
    "grunt-shell": "0.6.4",
    "istanbul": "0.2.7",
    "jasmine-node": "1.13.1",
    "sphere-coffeelint": "git://github.com/sphereio/sphere-coffeelint.git#master"
  },
  "readme": "![SPHERE.IO icon](https://admin.sphere.io/assets/images/sphere_logo_rgb_long.png)\n\n# Node.js Sync\n\n[![Build Status](https://secure.travis-ci.org/sphereio/sphere-node-sync.png?branch=master)](http://travis-ci.org/sphereio/sphere-node-sync) [![NPM version](https://badge.fury.io/js/sphere-node-sync.png)](http://badge.fury.io/js/sphere-node-sync) [![Coverage Status](https://coveralls.io/repos/sphereio/sphere-node-sync/badge.png?branch=master)](https://coveralls.io/r/sphereio/sphere-node-sync?branch=master) [![Dependency Status](https://david-dm.org/sphereio/sphere-node-sync.png?theme=shields.io)](https://david-dm.org/sphereio/sphere-node-sync) [![devDependency Status](https://david-dm.org/sphereio/sphere-node-sync/dev-status.png?theme=shields.io)](https://david-dm.org/sphereio/sphere-node-sync#info=devDependencies)\n\nCollection of Sync components for SPHERE.IO entities\n\n## Table of Contents\n* [Getting Started](#getting-started)\n* [Documentation](#documentation)\n  * [SphereClient](#sphereclient)\n  * [Error handling](#error-handling)\n  * [Methods](#methods)\n    * [config](#config)\n    * [buildActions](#buildactions)\n    * [filterActions](#filteractions)\n    * [get](#get)\n    * [update](#update)\n* [Update actions groups](#update-actions-groups)\n  * [ProductSync](#productsync)\n  * [OrderSync](#ordersync)\n  * [InventorySync](#inventorysync)\n* [Updater components](#updater-components)\n* [Contributing](#contributing)\n* [Releasing](#releasing)\n* [Styleguide](#styleguide)\n* [License](#license)\n\n## Getting Started\nInstall the module with: `npm install sphere-node-sync`\n\n```coffeescript\nsync = require 'sphere-node-sync'\n\n# or require one of the Sync components\n{ProductSync} = require 'sphere-node-sync'\n{OrderSync} = require 'sphere-node-sync'\n{InventorySync} = require 'sphere-node-sync'\n```\n\n## Documentation\nThe module exposes many collection `Sync` objects, _resource-specific_, and it's used to build update actions for that resource. Available resources are:\n\n- *products* - `ProductSync`\n- *orders* - `OrderSync`\n- *inventory* - `InventorySync`\n\n> All `Sync` objects share the same implementation, only the _mapping_ of the *actions update* is resource-specific. **I will assume from now on (for the sake of simplicity) that the `Sync` is either an instance of one of the resources listed above.**\n\n\n### SphereClient\nIt's _recommended_ to use the `Sync` together with the [sphere-node-client](https://github.com/sphereio/sphere-node-client) module and work with promises.\n> A `Sync` instance has an internal instance `_client` of the `SphereClient`. You can use that instead of creating a new instance.\n\n```coffeescript\nsync = new Sync({})\nsync._client ...\n```\n> The **credentials are optional**, if you don't pass them the `SphereClient` won't be instantiated.\n\n\n### Error handling\nPlease refer to the `SphereClient` [documentation](https://github.com/sphereio/sphere-node-client#error-handling).\n\n\n### Methods\n\nFollowing methods are accessible from the object.\n\n#### `config`\nPass a list of [actions groups](#update-actions-groups) in order to restrict the actions that will be built\n\n```coffeescript\noptions = [\n  {type: 'base', group: 'black'}\n  {type: 'prices', group: 'white'}\n  {type: 'variants', group: 'black'}\n]\n# => this will exclude 'base' and 'variants' mapping of actions and include the rest (white group is actually implicit if not given)\n\nsync.config(options).buildActions ...\n```\n\n> An empty list means all actions are built\n\n#### `buildActions`\nThere is basically one main method `buildActions` which expects **2 valid JSON objects**, here is the signature:\n\n```coffeescript\nbuildActions = (new_obj, old_obj) ->\n  # ...\n  this\n```\nThe method returns a reference to the current object `Sync`, so that you can chain it with optional methods `get` and `update`.\n> The important data (actions, etc) is stored in a variable of the Sync class and accessible with `_data`.\n\n#### `filterActions`\nYou can pass a custom function to filter built actions and internally update the actions payload.\n> This function should be called after the actions are built\n\n```coffeescript\nsync = new ProductSync {...}\nsync.buildActions(new_obj, old_obj).filterActions (a) -> a is 'changeName'\n# => actions payload will now contain only 'changeName' action\n```\nThe method returns a reference to the current object `Sync`, so that you can chain it with optional methods `get` and `update`.\n\n#### `get`\nIt's a wrapper of the `_data` object and returns one of its values given a `key`.\nAvailable keys:\n\n```coffeescript\n_data =\n  update: {...} # the update actions object, undefined if there is no update\n  updateId: '...' # the id of the product to be updated\n\n# example\nsync.get() # return _data.update\nsync.get('updateId') # return _data.updateId\n\n# or chain it\nsync.buildActions(new_obj, old_obj).get()\n```\n\n#### `update`\nYou can chain this after you built your actions. This will return a [Q Promise](https://github.com/kriskowal/q).\nIt will use internally the `id` of the `old_obj` passed in the `buildActions` to update the related resource.\n\n> It will throw an `Error` if no credentials were given to the `Sync` object.\n\n```coffeescript\nsync.buildActions(new_obj, old_obj).update()\n.then (result) -> # {statusCode: 200, body: {}}\n```\n\n## Update actions groups\nBased on the instantiated resource sync (product, order, ...) there are groups of actions used for updates defined below.\n\n> Groups gives you the ability to configure the sync to include / exclude them when the actions are [built](#buildactions). This concept can be expressed in terms of _blacklisting_ and _whitelisting_\n\n\n### ProductSync\n\n- `base` (name, slug, description)\n- `references` (taxCategory, categories)\n- `prices`\n- `attributes`\n- `images`\n- `variants`\n- `metaAttributes`\n\n### OrderSync\n\n- `status` (orderState, paymentState, shipmentState)\n- `returnInfo` (returnInfo, shipmentState / paymentState of ReturnInfo)\n- `deliveries` (delivery, parcel)\n\n### InventorySync\n\n- `quantity`\n- `expectedDelivery`\n\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Releasing\nReleasing a new version is completely automated using the Grunt task `grunt release`.\n\n```javascript\ngrunt release // patch release\ngrunt release:minor // minor release\ngrunt release:major // major release\n```\n\n## Styleguide\nWe <3 CoffeeScript! So please have a look at this referenced [coffeescript styleguide](https://github.com/polarmobile/coffeescript-style-guide) when doing changes to the code.\n\n## License\nCopyright (c) 2013 Nicola Molinari\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "sphere-node-sync@0.5.5",
  "_from": "sphere-node-sync@0.5.5"
}
