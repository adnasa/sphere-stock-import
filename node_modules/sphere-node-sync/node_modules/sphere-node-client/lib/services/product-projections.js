var BaseService, ProductProjectionService, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

BaseService = require('./base');


/**
 * Creates a new ProductProjectionService.
 * @class ProductProjectionService
 */

ProductProjectionService = (function(_super) {
  var _staged;

  __extends(ProductProjectionService, _super);

  function ProductProjectionService() {
    return ProductProjectionService.__super__.constructor.apply(this, arguments);
  }

  _staged = false;


  /**
   * @const
   * @private
   * Base path for a ProductProjections API resource endpoint
   * @type {String}
   */

  ProductProjectionService.baseResourceEndpoint = '/product-projections';


  /**
   * Define to fetch only staged products
   * @param Boolean [queryStaged] true to query staged products (default). False to query published products
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.staged = function(queryStaged) {
    if (queryStaged == null) {
      queryStaged = true;
    }
    this._staged = queryStaged;
    return this;
  };


  /**
   * @private
   * Extend the query string by staged param
   * @return {String} the query string
   */

  ProductProjectionService.prototype._queryString = function() {
    var s;
    s = ProductProjectionService.__super__._queryString.apply(this, arguments);
    if (this._staged) {
      return _.compact([s, "staged=" + this._staged]).join('&');
    }
    return s;
  };

  return ProductProjectionService;

})(BaseService);


/**
 * The {@link ProductProjectionService} service.
 */

module.exports = ProductProjectionService;
